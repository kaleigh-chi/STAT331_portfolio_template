---
title: "The Power of Efficiency"
format: html
editor: visual
---

I think "efficiency" in relations to statistical computing is being able to run a code that doesn't repeat itself and minimizes run time when we render or run a code block. Being efficient in statistical computing means that anyone can also can read it fast too. Reflecting on my past work, I realized I was calling the same lines of code over again for different variables. My computer took longer to process everything I was running, and it was not easy on the eyes to read the same thing over and over again. I imagine it is also not as easy for my viewers to see as well because it's lengthy. Additionally, debugging becomes harder to point out because there's more for the eye to scan and potentially miss.

I received many comments like in Lab 4 and Lab 7 where I had too much redundancy. Lab 4 was where I had my a-ha moment because fixing that entire assignment to meet the feedback felt like I hit a state of enlightenment. Originally in Lab 4, there was way too much redundancy in Question 5 when it came to creating the dataset. I wasn't using filtering joins, but rather, I was using filter() over and over again before I received what I wanted. That wasn't the point of the lab, nor was it efficient for me to code. Now that I've revised it, my Lab 4 looks so much easier to look at, and I imagine an outside perspective would also agree. My Lab 4 doesn't take as long to run anymore because it's easier to read for the compiler to digest as well.

Another a-ha moment I had was in my Lab 7. I was writing Part 2 Question 1 which was a function. Its purpose was to help me be more efficient, but it was ironic that my function was too convoluted. I received feedback to think about how I could reduce the redundancy. That feedback alone was my wake up call that my function was super hard to look at. The original equation that Part 2 Question 1 called for us to write was 4 lines long, with multiple repetitions of add weights, subtracting lengths, the mins/maxs of lengths and weights. Mines was one notch less crazy than that. But I had to ask myself what I was even trying to do in the first place. I noted to myself, if I ever had to question my own code, it's not any easier for others. I cut down on my original submission to create a simpler function to look at that got the job done as well. If I ever used this function and ran into bugs, I wouldn't have as difficult of a time scanning for bugs because the code is concise, and I'm sure others would be able to point my errors out easier as well.

Sometimes less is more, and in coding, being efficient is something that's learned the more we code and revise our knowledge with the latest tools. Having clarity allows us and our peers collaborate more efficiently to get work done because we can read, debug, and run our codes faster.
