---
title: "PA 5.1: Regular Expressions"
format: 
  html: 
    self-contained: true
    code-tools: true
editor: visual
execute: 
  echo: true
  warning: false
  message: false
---

## Setup

The scrambled message data are located in the data folder. Modify the code below to load the scrambled message dataset :

```{r package}
library(tidyverse)
```

```{r data}
message <- read_csv(here::here("Week 5", "PracticeActivity", "scrambled_message.txt"))
```

## Warm-up exercises

```{r}
word <- message %>%
  pull(Word)
```

1.  How many characters are in the scrambled message?

892 characters are in the scrambled message.

[**Vector Approach:**]{.underline}

```{r num-chr-vector}
str_length(word) %>% 
  sum()
```

[**Dataframe Approach:**]{.underline}

```{r num-chr-dataframe}
message %>% 
  mutate(length = str_length(Word)) %>% 
  summarise(total_length = sum(length))
```

2.  How many words are in the scrambled message?

There are 127 words in the scrambled message.

[**Vector Approach:**]{.underline}

```{r num-words-vector}
str_subset(word, pattern = "\\b") %>% 
  length()
```

[**Dataframe Approach:**]{.underline}

```{r num-words-dataframe}
message %>% 
  filter(str_detect(Word, pattern = "\\w")) %>% 
  count() 
```

3.  Print out every piece of a word in the scrambled message that starts with the letter "m".

Words: "moszugh?", "mb", "meigh.ughhhh!", "me", "mabugh."

```{r starts-with-m}
str_subset(word, pattern = "^m")

```

3.  Print out every piece of a word in the scrambled message that ends with the letter "z"

Words: "casz", "ughhh!kirulenz", "kerdicz", "noz", "lez", "zhaz", "ughhh!maaz"

```{r ends-with-z}
str_subset(word, pattern = "z$")
```

3.  Print out every punctuation symbol in the scrambled message.

```{r words-with-punctuation}
message %>%
  mutate(punc = str_extract_all(word, pattern="[[:punct:]]")) %>%
  unnest(punc)
```

::: callout-tip
# Every punctuation symbol!

Careful! There could be multiple punctuation symbols in a word, so `str_extract_all()` seems like the better tool. However, the output of this function is a *list*. A helpful function for flattening a list to a regular column is `unnest()`!
:::

6.  Print out the longest word in the scrambled message.

```{r}
message %>%
  mutate(length = str_length(Word)) %>%
  slice_max(length, n = 1)
```

## Decode a message

Complete the following steps to decode the message.

1.  Remove any spaces before or after each word.

2.  No word should be longer than 16 characters. Drop all extra characters off the end of each word.

3.  Any time you see the word "ugh", with any number of h's, followed by a punctuation mark, delete this.

4.  Replace all instances of exactly 2 a's with exactly 2 e's.

5.  Replace all z's with t's.

6.  Every word that ends in b, change that to a y.

7.  Every word that starts with k, change that to a v.

8.  Use `str_c()` to recombine all your words into a message.

9.  Find the movie this quote is from.

```{r decode-movie-quote}
#1
message <- message %>%
  mutate(
    Word = str_trim(Word)
  )
  
```

```{r}
#2
message <- message %>%
  mutate(
    Word = str_sub(Word, 
                   start = 1, end = 16)
  )
  
```

```{r}
#3
message <- message %>%
  mutate(
    Word = str_remove_all(Word, pattern = "ugh+h(\\?|\\!)"),
    Word = str_remove_all(Word, pattern = "ugh(\\?|\\!|\\.)")
  )
```

```{r}
#4
message <- message %>%
  mutate(
    Word = str_replace_all(Word, "aa", "ee")
  )
```

```{r}
#5
message <- message %>%
  mutate(
    Word = str_replace_all(Word, "z", "t")
  )
```

```{r}
#6
message <- message %>%
  mutate(Word = str_replace_all(Word, "b$", "y"))
```

```{r}
#7
message <- message %>%
  mutate(Word = str_replace_all(Word, "k|K", "v"))
```

```{r}
#8
quote <- str_c(message$Word, collapse = " ")
quote
  
```
