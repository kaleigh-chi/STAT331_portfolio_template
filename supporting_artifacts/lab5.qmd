---
title: "lab5"
author: "Kaleigh Chi"
format: 
  html: 
    self-contained: true
    code-tools: true
    code-fold: true
execute: 
  echo: true
  error: true
---

# 1. Revisiting Lab 2

```{r}
#| message: false

# Setting up Lab 5
library(tidyverse)
library(here)

surveys <- read_csv(here("Week 2", "Lab 2", "surveys.csv"))
```

## Question 1: Reorder Species

```{r}
# Learning about forcats with source: https://cran.r-project.org/web/packages/forcats/vignettes/forcats.html

# REVISION learning about forcats in ggplot with source: https://forcats.tidyverse.org/reference/fct_reorder.html

species_plot <- ggplot(data = surveys, 
                       aes(x = weight, 
                           y = fct_reorder(species, weight), 
                           group = species)) +
  geom_jitter(color = "tomato", 
              size = 0.4,
              alpha = 1/7) +
  geom_boxplot() + 
  labs(x = "Weight (gm)", 
       y = "Species") 
```

## Question 2: Moving y-axis labels

```{r}
#getting rid of y labels

# REVISION learning how to put ylab() = NULL inside of labs with source: https://stackoverflow.com/questions/41048767/removing-y-label-from-ggplot

species_plot + 
  labs(title = "Distribution of Various Species Weight", y = NULL) +
  theme(plot.title.position = "plot")
```

# 2. Time Series Plot

## Question 1: Visualization of how weights vary for each genus over duration of study

```{r}
#| message: false

#learned about geom_line using source: https://ggplot2.tidyverse.org/reference/geom_path.html

#cleaning data for genus weights by year
weights_vary <- surveys %>%
  group_by(year, 
           genus) %>%
  summarize(weight) 


#plotting weight distribution of genus during study
ggplot(data = surveys, 
       aes(x = year, 
           y = weight, 
           col = genus)) +
  geom_line() +
  labs(x = "Year", 
       y = NULL,
       title = "Genus Weight Variation throughout Duration of Study") + 
  theme_light() +
  theme(plot.title.position = "plot")
```

## Question 2: Calculate and plot mean weight for each genus for each year

```{r}
#| message: false

#cleaning data for average genus weight by year
mean_weight_vary <- surveys %>%
  group_by(year, 
           genus) %>%
  summarize(mean_weight = mean(weight))

#plotting average weight distribution for genus during study
ggplot(data = mean_weight_vary, 
       aes(x = year, 
           y = mean_weight, 
           col = genus)) +
  geom_line() +
  labs(x = "Year", 
       y = NULL,
       title = "Average Genus Weight Variation throughout Duration of Study") +
  theme_light() +
  theme(plot.title.position = "plot")
```

## Question 3: Reorder the line

```{r}
#plotting Question 2 plot with reordered lines
ggplot(data = mean_weight_vary, 
       aes(x = year, 
           y = mean_weight, 
           col = fct_reorder2(genus, year, mean_weight))) +
  geom_line() +
  labs(x = "Year", 
       y = NULL,
       title = "Average Genus Weight Variation throughout Duration of Study") +
  theme_light() +
  theme(plot.title.position = "plot")
```

## Question 4: Giving the legend a new title and getting rid of y-axis labels

```{r}
#Changing the labels of the previous graph
ggplot(data = mean_weight_vary, 
       aes(x = year, 
           y = mean_weight, 
           col = fct_reorder2(genus, year, mean_weight))) +
  geom_line() +
  labs(x = "Year", 
       y = NULL,
       title = "Average Genus Weight Variation throughout Duration of Study",
       col = "Genus") +
  theme_light() +
  theme(plot.title.position = "plot") 
```

# 3. Captures over the week

## Question 1: Visualization of Rodents Captured Each Day of Week

```{r}
#learned to find number of occurences for each day of week with source: https://www.r-bloggers.com/2015/02/how-to-get-the-frequency-table-of-a-categorical-variable-as-a-data-frame-in-r/
#learned to remove legend with source: https://datacornering.com/how-to-remove-legend-or-guide-in-ggplot2/

#cleaning dataset for rodents captured
rodents_captured <- surveys %>%
  filter(taxa == "Rodent") %>%
  select(day_of_week) %>%
  group_by(day_of_week) 

rodents_captured <- count(rodents_captured, 
                          'day_of_week') %>%
  drop_na()

#creating plot for rodents captured
ggplot(data = rodents_captured, 
       aes(x = day_of_week, 
           y = n, 
           fill = day_of_week)) +
  geom_bar(stat = "identity", 
           show.legend = FALSE) +
  labs(x = "Day of Week", 
       y = NULL,
       title = "Number of Rodents Captured Throughout the Week") + 
  theme_light() +
  theme(plot.title.position = "plot")
```

## Question 2: Changing Order

```{r}
#reordering rodents captured 
order_week <- factor(rodents_captured$day_of_week, 
                     levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))

#creating reordered plot for rodents captured
ggplot(data = rodents_captured, 
       aes(x = day_of_week, 
           y = n, 
           fill = day_of_week,
           col = fct_reorder(order_week, day_of_week))) +
  geom_bar(stat = "identity",
           show.legend = FALSE) +
  labs(x = "Day of Week",
       y = NULL,
       title = "Number of Rodents Captured Throughout the Week") +
  theme_light() +
  theme(plot.title.position = "plot")
```

## Question 3: Collapse into Different Levels

```{r}
#collapsing days of week into different levels with forcats
week_end_day <- fct_collapse(rodents_captured$day_of_week,
                                weekend = c("Sun", "Sat"),
                                weekday = c("Mon", "Tue", "Wed", "Thu", "Fri")
                             )

#creating plot with rodents captured
ggplot(data = rodents_captured, 
       mapping = aes(x = week_end_day, y = n, fill = day_of_week)) +
  geom_col() +
  labs(x = "Day of Week", 
       y = NULL,
       title = "Total Number of Rodents Captured") +
  ylim(0, 20000) +
  theme_light() +
  theme(plot.title.position = "plot") 
```

# Revisions
Previously when I submitted my lab 5, I made a lot of extra steps in ordering my dataset and creating visualization features where I got successes on. On Lab 2 question 1 I was creating a new data set and reordering from there, question 2 used a y-axis label line, Time Series question 3 I was using fct_reorder(), question 4 I was calling color legend label outside of labs(), and Weekly Captures question 2 I didn't make use of forcats but instead used a factor function to create levels. Regarding question Captures Over Week question 2 I used forcats and dplyr functions. The output wasn't able to yield what I expected unfortunately.

I think I was writing code methodically as it made sense to me. I now realize from Lab 2 question 1 to Time Series question 4, I could've made my code blocks more efficient when I added features within parentheses of existing functions or used forcats nested in my ggplots. For Time Series question 3, I quickly realized fct_reorder is more helpful for my case because it reorders factors by y values associated with the x values. This is helpful when I want to sort based on my genus weight. I realize that from Captures over Week question 2 I was supposed to be using forcats since it was the learning of the week. I think moving forward in the future it's extrememly useful for yielding different kinds of orders in my visualizations. 
